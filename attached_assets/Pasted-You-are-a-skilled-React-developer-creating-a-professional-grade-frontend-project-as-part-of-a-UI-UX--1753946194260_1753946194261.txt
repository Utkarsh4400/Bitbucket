You are a skilled React developer creating a professional-grade frontend project as part of a UI/UX assignment. Build a complete Multi-Theme Switcher Web App using React and TypeScript, following modern development best practices.

The app must feel like it was built by a real human developer with clean code structure, proper componentization, and readable formatting. Your goal is to showcase multiple visual themes and good frontend architecture, not just color switching.

ðŸ”§ Functional Requirements
Fixed Header:

Top navigation bar with a dummy logo/app name.

Theme switcher as a dropdown (with three themes: Theme 1, Theme 2, Theme 3).

Default theme: Theme 1.

Themes (structurally different, not just colors):

Theme 1: Minimalist layout, light background, sans-serif font, clean spacing.

Theme 2: Dark mode with left sidebar layout, bold serif font.

Theme 3: Vibrant and colorful, card-based grid layout, playful font like Pacifico (Google Font).

Each theme must alter:

Layout structure

Font family and size

Spacing and margins

Component styling

Pages (use React Router):

Home

About

Contact

Main Content Example (in all pages):

Page title

Sample paragraph

Styled button

List or card display (e.g., product cards from a fake API)

Fully responsive (mobile and desktop)

Functionality:

Theme state managed using React Context API or Redux.

Persist selected theme using localStorage.

Fetch data from: https://fakestoreapi.com/products and display as cards.

Add smooth, subtle transition animations when switching themes.

Use React Router to demonstrate theme consistency across routes.

Use TypeScript throughout the app.

Ensure responsive layout with Tailwind CSS, CSS Modules, or Styled-components.

Do not use large UI libraries like Material UI or Ant Design.

Ensure security best practices (no unsafe HTML, safe localStorage usage, etc.)

Fully responsive and compatible with modern browsers and devices.

ðŸ›  Technical Expectations
Modular component structure (Header, ThemeProvider, Layout, Pages, etc.)

Reusable UI components with proper props and types.

Clean code comments and consistent formatting.

Use .tsx files and maintain a project structure that resembles a real-world scalable app.

ðŸŽ¯ Summary
The goal is to build a multi-themed React application that feels modern, intuitive, and well-architected. Themes should be meaningfulâ€”visually and structurally different. Pages and theme logic should work seamlessly across the app with best development practices.

